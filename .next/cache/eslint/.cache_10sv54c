[{"/Users/nate/Code/notion-ai-news/src/App.js":"1","/Users/nate/Code/notion-ai-news/src/App.test.js":"2","/Users/nate/Code/notion-ai-news/src/config.js":"3","/Users/nate/Code/notion-ai-news/src/index.js":"4","/Users/nate/Code/notion-ai-news/src/notion.js":"5","/Users/nate/Code/notion-ai-news/src/pages/_app.js":"6","/Users/nate/Code/notion-ai-news/src/pages/index.js":"7","/Users/nate/Code/notion-ai-news/src/reportWebVitals.js":"8","/Users/nate/Code/notion-ai-news/src/setupTests.js":"9"},{"size":528,"mtime":1682831551035,"results":"10","hashOfConfig":"11"},{"size":246,"mtime":1682831551035,"results":"12","hashOfConfig":"11"},{"size":70,"mtime":1682836115229,"results":"13","hashOfConfig":"11"},{"size":535,"mtime":1682831551035,"results":"14","hashOfConfig":"11"},{"size":142,"mtime":1682832491741,"results":"15","hashOfConfig":"11"},{"size":194,"mtime":1682884442847,"results":"16","hashOfConfig":"11"},{"size":3977,"mtime":1682886231942,"results":"17","hashOfConfig":"11"},{"size":362,"mtime":1682831551035,"results":"18","hashOfConfig":"11"},{"size":241,"mtime":1682831551035,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wbxqm9",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nate/Code/notion-ai-news/src/App.js",[],[],"/Users/nate/Code/notion-ai-news/src/App.test.js",[],[],"/Users/nate/Code/notion-ai-news/src/config.js",[],[],"/Users/nate/Code/notion-ai-news/src/index.js",[],[],"/Users/nate/Code/notion-ai-news/src/notion.js",[],[],"/Users/nate/Code/notion-ai-news/src/pages/_app.js",[],[],"/Users/nate/Code/notion-ai-news/src/pages/index.js",["48","49"],[],"import { useRouter } from 'next/router';\nimport notion from '../notion';\nimport { NOTION_DATABASE_ID } from '../config'; // Import the constant from config.js\nimport Link from 'next/link';\nimport styles from './newsItem.module.css'; // Import the CSS module\n\n// Helper function to format date and time\nconst formatDateAndTime = (dateString) => {\n  const options = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n  };\n  return new Intl.DateTimeFormat('en-US', options).format(new Date(dateString));\n};\n\nexport async function getServerSideProps(context) {\n  const selectedTag = context.query.tag; // Get the selected tag from the query parameter\n  const databaseId = NOTION_DATABASE_ID;\n  const response = await notion.databases.query({\n    database_id: databaseId,\n  });\n\n  // Filter the results based on the selected tag (if provided)\n  const filteredResults = selectedTag\n    ? response.results.filter((page) => {\n        const tags = page.properties.Tags?.multi_select.map((tag) => tag.name) || [];\n        return tags.includes(selectedTag);\n      })\n    : response.results;\n\n  const results = filteredResults.map((page) => {\n    // Extract and format data from the Notion page\n    const name = page.properties.Name?.title[0]?.plain_text || '';\n    const tags = page.properties.Tags?.multi_select.map((tag) => tag.name) || [];\n    const url = page.properties.URL?.url || '';\n    const publishedDate = page.properties['Published Date']?.date?.start;\n    const formattedPublishedDate = publishedDate ? formatDateAndTime(publishedDate) : '';\n    const bookmarkedDate = page.created_time;\n    const formattedBookmarkedDate = formatDateAndTime(bookmarkedDate);\n\n    return { name, tags, url, publishedDate: formattedPublishedDate, bookmarkedDate: formattedBookmarkedDate };\n  });\n\n  return {\n    props: {\n      results,\n    },\n  };\n}\n\nexport default function Home({ results }) {\n  const router = useRouter();\n  const selectedTag = router.query.tag; // Get the selected tag from the query parameter\n\n  // Extract all unique tags from the results\n  const uniqueTags = new Set();\n  results.forEach((result) => {\n    result.tags.forEach((tag) => uniqueTags.add(tag));\n  });\n\n  return (\n    <div>\n      <h1>AI News</h1>\n\n      {/* Conditionally render the list of all unique tags as links based on the absence of the selectedTag */}\n      {!selectedTag && (\n        <div className=\"tagsList\">\n          {Array.from(uniqueTags).map((tag, index) => (\n            <span key={index}>\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  router.push(`/?tag=${encodeURIComponent(tag)}`);\n                }}\n              >\n                {tag}\n              </a>\n              {index < uniqueTags.size - 1 && ', '}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Conditionally render the \"Show All\" link based on the presence of the selectedTag */}\n      {selectedTag && (\n        <div className=\"showAll\">\n          <Link href=\"/\">\n            Show All\n          </Link>\n        </div>\n      )}\n        {results.map((result, index) => (\n    <div key={index} className={styles.newsItem}>\n      <div className=\"bmDate\">{result.bookmarkedDate}</div>\n      <div>{result.name}</div>\n      <div>\n        {result.tags.map((tag, tagIndex) => (\n          <span key={tagIndex}>\n            <a\n              href=\"#\"\n              onClick={(e) => {\n                e.preventDefault();\n                router.push(`/?tag=${encodeURIComponent(tag)}`);\n              }}\n            >\n              {tag}\n            </a>\n            {tagIndex < result.tags.length - 1 && ', '}\n          </span>\n        ))}\n      </div>\n      <div>\n        <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          Read More\n        </a>\n      </div>\n      <div>Published: {result.publishedDate}</div>\n    </div>\n  ))}\n</div>\n);\n}\n           \n","/Users/nate/Code/notion-ai-news/src/reportWebVitals.js",[],[],"/Users/nate/Code/notion-ai-news/src/setupTests.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":73,"column":15,"nodeType":"52","endLine":79,"endColumn":16},{"ruleId":"50","severity":1,"message":"51","line":103,"column":13,"nodeType":"52","endLine":109,"endColumn":14},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]